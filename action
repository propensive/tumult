#!/bin/bash

echo "PWD=$PWD"

# Update environment
apt update
apt install -y inkscape imagemagick git gettext-base gh

# Regenerate logos
mkdir -p doc/images
inkscape doc/logo.svg --export-filename=doc/images/2400x2400@300dpi.png --export-dpi=300 --export-width=2400 --export-height=2400 --export-background-opacity=0
inkscape doc/logo.svg --export-filename=doc/images/1000x1000.png --export-dpi=96 --export-width=1000 --export-height=1000 --export-background-opacity=0
convert doc/images/1000x1000.png -resize 200x200 -strip doc/images/200x200.png
convert doc/images/1000x1000.png -resize 128x128 -strip doc/images/128x128.png
convert doc/images/1000x1000.png -resize 48x48 -strip doc/images/48x48.png
convert doc/images/1000x1000.png -resize 16x16 -strip doc/images/16x16.png
convert doc/images/1000x1000.png -background none -gravity center -resize 620x620 -extent 1280x640 -strip doc/images/github.png
convert doc/images/github.png /github.png -background transparent -layers flatten -strip doc/images/github.png

# Update headers
MOD="$(cat fury | grep project | cut -d' ' -f2)"
export MOD
echo "Module: $MOD"
ID="$(echo "$MOD" | cut -d'/' -f2)"
export ID
echo "ID: $ID"
TITLE="$(tr '[:lower:]' '[:upper:]' <<< "${ID:0:1}")${ID:1}"
export TITLE
echo "Title: $TITLE"
START="$(git show -s --format=%ci "$(git rev-list --max-parents=0 HEAD)" | cut -d- -f1)"
export START
echo "Start: $START"
YEAR="$(date "+%y")"
export YEAR
echo "Year: $YEAR"

if [[ "$START" = "$YEAR" ]]
then COPYRIGHT="$START"
else COPYRIGHT="${START}-$(date +%y)"
fi
export COPYRIGHT

VERSION="$(git describe --tags --abbrev=0 2> /dev/null || echo '[unreleased]')"
export VERSION

TMP=/tmp.scala
cat /header.txt | envsubst > /header.tmp
mv /header.tmp /header.txt

for FILE in src/**/*.scala
do
  echo "Updating header in $FILE"
  cat /header.txt > "${TMP}"
  sed '/\(package\|object\|import\)/,$!d' "${FILE}" >> "${TMP}" && mv "${TMP}" "${FILE}"
done
rm /header.txt

# Update labels
gh label create duplicate      -f -d 'An equivalent issue already exists'                      -c '#437a89'
gh label create forsaken       -f -d 'This issue will not be fixed'                            -c '#7d5baf'
gh label create severe         -f -d 'Has a significant impact on many users'                  -c '#b65ea1'
gh label create bug            -f -d 'Describes something not working as intended'             -c '#ef6092'
gh label create invalid        -f -d 'Something does not seem right about this'                -c '#fc6f74'
gh label create 'help wanted'  -f -d 'External assistance is needed'                           -c '#fc8b72'
gh label create 'code quality' -f -d 'Concerns the standard of code rather than functionality' -c '#fca054'
gh label create question       -f -d 'Looking for an answer'                                   -c '#fcb536'
gh label create enhancement    -f -d 'An improvement to existing functionality'                -c '#fcd085'
gh label create beginner       -f -d 'A good introduction for newcomers'                       -c '#e6dd86'
gh label create minor          -f -d 'Has only a small impact for the majority of users'       -c '#d0e993'
gh label create release        -f -d 'Relates to the bureaucracy of releasing the project'     -c '#b2ddbe'
gh label create api            -f -d 'Relates to the API design'                               -c '#93d0e9'
gh label create testing        -f -d 'Concerns how the project is verified'                    -c '#81b6cc'
gh label create performance    -f -d 'Relates to the efficiency or speed of an operation'      -c '#6f9caf'
gh label create docs           -f -d 'Improvements or additions to documentation'              -c '#5d8292'
gh label create core           -f -d 'Describes core required functionality'                   -c '#4a6875'
gh label delete 'good first issue' --confirm
gh label delete wontfix --confirm
gh label delete documentation --confirm